{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../services/log.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction LogComponent_div_6_tr_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const host_r3 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(host_r3.host);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(host_r3.accessCount);\n  }\n}\nfunction LogComponent_div_6_tr_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const uri_r4 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(uri_r4.uri);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(uri_r4.accessCount);\n  }\n}\nfunction LogComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"h3\");\n    i0.ɵɵtext(2, \"Log Statistics\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"h4\");\n    i0.ɵɵtext(4, \"Accesses per Host:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"table\", 4)(6, \"tr\")(7, \"th\");\n    i0.ɵɵtext(8, \"Host\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"th\");\n    i0.ɵɵtext(10, \"Access Count\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(11, LogComponent_div_6_tr_11_Template, 5, 2, \"tr\", 5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"h4\");\n    i0.ɵɵtext(13, \"Successful Resource Accesses by URI:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"table\", 4)(15, \"tr\")(16, \"th\");\n    i0.ɵɵtext(17, \"URI\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(18, \"th\");\n    i0.ɵɵtext(19, \"Success Count\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(20, LogComponent_div_6_tr_20_Template, 5, 2, \"tr\", 5);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(11);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.logResults.hostAccessCounts);\n    i0.ɵɵadvance(9);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.logResults.resourceAccessCounts);\n  }\n}\nexport class LogComponent {\n  constructor(logService) {\n    this.logService = logService;\n    this.logInput = '';\n    this.logResults = null;\n  }\n  // Handle log data upload\n  uploadLog() {\n    const logLines = this.logInput.split('\\n').map(line => line.trim());\n    this.logService.uploadLog(logLines).subscribe({\n      next: response => {\n        this.logResults = response;\n      },\n      error: err => {\n        console.error('Failed to upload logs:', err);\n      }\n    });\n  }\n}\nLogComponent.ɵfac = function LogComponent_Factory(t) {\n  return new (t || LogComponent)(i0.ɵɵdirectiveInject(i1.LogService));\n};\nLogComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LogComponent,\n  selectors: [[\"app-log\"]],\n  decls: 7,\n  vars: 2,\n  consts: [[1, \"container\"], [\"rows\", \"10\", \"cols\", \"50\", \"placeholder\", \"Paste log data here\", 3, \"ngModel\", \"ngModelChange\"], [3, \"click\"], [4, \"ngIf\"], [\"border\", \"1\"], [4, \"ngFor\", \"ngForOf\"]],\n  template: function LogComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n      i0.ɵɵtext(2, \"Log File Uploader\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"textarea\", 1);\n      i0.ɵɵlistener(\"ngModelChange\", function LogComponent_Template_textarea_ngModelChange_3_listener($event) {\n        return ctx.logInput = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"button\", 2);\n      i0.ɵɵlistener(\"click\", function LogComponent_Template_button_click_4_listener() {\n        return ctx.uploadLog();\n      });\n      i0.ɵɵtext(5, \"Upload Logs\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(6, LogComponent_div_6_Template, 21, 2, \"div\", 3);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngModel\", ctx.logInput);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ctx.logResults);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgModel],\n  styles: [\"body[_ngcontent-%COMP%] {\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9sb2dzL2xvZy5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJib2R5IHtcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":";;;;;;IAiBMA,0BAAqD;IAC/CA,YAAe;IAAAA,iBAAK;IACxBA,0BAAI;IAAAA,YAAsB;IAAAA,iBAAK;;;;IAD3BA,eAAe;IAAfA,kCAAe;IACfA,eAAsB;IAAtBA,yCAAsB;;;;;IAU5BA,0BAAwD;IAClDA,YAAa;IAAAA,iBAAK;IACtBA,0BAAI;IAAAA,YAAqB;IAAAA,iBAAK;;;;IAD1BA,eAAa;IAAbA,gCAAa;IACbA,eAAqB;IAArBA,wCAAqB;;;;;IAtB/BA,2BAAwB;IAClBA,8BAAc;IAAAA,iBAAK;IACvBA,0BAAI;IAAAA,kCAAkB;IAAAA,iBAAK;IAC3BA,gCAAkB;IAEVA,oBAAI;IAAAA,iBAAK;IACbA,0BAAI;IAAAA,6BAAY;IAAAA,iBAAK;IAEvBA,mEAGK;IACPA,iBAAQ;IAERA,2BAAI;IAAAA,qDAAoC;IAAAA,iBAAK;IAC7CA,iCAAkB;IAEVA,oBAAG;IAAAA,iBAAK;IACZA,2BAAI;IAAAA,8BAAa;IAAAA,iBAAK;IAExBA,mEAGK;IACPA,iBAAQ;;;;IAhBeA,gBAA8B;IAA9BA,4DAA8B;IAY/BA,eAAkC;IAAlCA,gEAAkC;;;ACpB5D,OAAM,MAAOC,YAAY;EAIvBC,YAAoBC,UAAsB;IAAtB,eAAU,GAAVA,UAAU;IAH9B,aAAQ,GAAW,EAAE;IACrB,eAAU,GAAQ,IAAI;EAEwB;EAE9C;EACAC,SAAS;IACP,MAAMC,QAAQ,GAAG,IAAI,CAACC,QAAQ,CAACC,KAAK,CAAC,IAAI,CAAC,CAACC,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,IAAI,EAAE,CAAC;IACnE,IAAI,CAACP,UAAU,CAACC,SAAS,CAACC,QAAQ,CAAC,CAACM,SAAS,CAAC;MAC5CC,IAAI,EAAGC,QAAQ,IAAI;QACjB,IAAI,CAACC,UAAU,GAAGD,QAAQ;MAC5B,CAAC;MACDE,KAAK,EAAGC,GAAG,IAAI;QACbC,OAAO,CAACF,KAAK,CAAC,wBAAwB,EAAEC,GAAG,CAAC;MAC9C;KACD,CAAC;EACJ;;AAjBWf,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;QAAZA,YAAY;EAAAiB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDRzBtB,8BAAuB;MACjBA,iCAAiB;MAAAA,iBAAK;MAC1BA,mCAG4C;MAHlCA;QAAA;MAAA,EAAsB;MAGYA,iBAAW;MACvDA,iCAA8B;MAAtBA;QAAA,OAASuB,eAAW;MAAA,EAAC;MAACvB,2BAAW;MAAAA,iBAAS;MAElDA,8DAyBM;MACRA,iBAAM;;;MAhCMA,eAAsB;MAAtBA,sCAAsB;MAM1BA,eAAgB;MAAhBA,qCAAgB","names":["i0","LogComponent","constructor","logService","uploadLog","logLines","logInput","split","map","line","trim","subscribe","next","response","logResults","error","err","console","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\Administrator\\source\\repos\\LogParser.UI\\ClientApp\\src\\app\\components\\logs\\log.component.html","C:\\Users\\Administrator\\source\\repos\\LogParser.UI\\ClientApp\\src\\app\\components\\logs\\log.component.ts"],"sourcesContent":["<!-- src/app/components/log/log.component.html -->\r\n<div class=\"container\">\r\n  <h2>Log File Uploader</h2>\r\n  <textarea [(ngModel)]=\"logInput\"\r\n            rows=\"10\"\r\n            cols=\"50\"\r\n            placeholder=\"Paste log data here\"></textarea>\r\n  <button (click)=\"uploadLog()\">Upload Logs</button>\r\n\r\n  <div *ngIf=\"logResults\">\r\n    <h3>Log Statistics</h3>\r\n    <h4>Accesses per Host:</h4>\r\n    <table border=\"1\">\r\n      <tr>\r\n        <th>Host</th>\r\n        <th>Access Count</th>\r\n      </tr>\r\n      <tr *ngFor=\"let host of logResults.hostAccessCounts\">\r\n        <td>{{ host.host }}</td>\r\n        <td>{{ host.accessCount }}</td>\r\n      </tr>\r\n    </table>\r\n\r\n    <h4>Successful Resource Accesses by URI:</h4>\r\n    <table border=\"1\">\r\n      <tr>\r\n        <th>URI</th>\r\n        <th>Success Count</th>\r\n      </tr>\r\n      <tr *ngFor=\"let uri of logResults.resourceAccessCounts\">\r\n        <td>{{ uri.uri }}</td>\r\n        <td>{{ uri.accessCount }}</td>\r\n      </tr>\r\n    </table>\r\n  </div>\r\n</div>\r\n","// src/app/components/log/log.component.ts\r\nimport { Component } from '@angular/core';\r\nimport { LogService } from '../../../services/log.service';\r\n\r\n@Component({\r\n  selector: 'app-log',\r\n  templateUrl: './log.component.html',\r\n  styleUrls: ['./log.component.css'],\r\n})\r\nexport class LogComponent {\r\n  logInput: string = '';\r\n  logResults: any = null;\r\n\r\n  constructor(private logService: LogService) { }\r\n\r\n  // Handle log data upload\r\n  uploadLog(): void {\r\n    const logLines = this.logInput.split('\\n').map(line => line.trim());\r\n    this.logService.uploadLog(logLines).subscribe({\r\n      next: (response) => {\r\n        this.logResults = response;\r\n      },\r\n      error: (err) => {\r\n        console.error('Failed to upload logs:', err);\r\n      },\r\n    });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}